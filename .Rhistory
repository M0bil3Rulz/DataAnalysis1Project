getwd()
#
#
#
getDataFrame <- function( workingDirectory, dataFile )
{
pDataFile <- paste0( workingDirectory, dataFile )
return( read.table( pDataFile, sep=",", header=TRUE ) )
}
loanData <- getDataFrame( getwd(), "loansData.csv" )
loanData
#
#
#
getDataFrame <- function( workingDirectory, dataFile )
{
pDataFile <- paste0( workingDirectory, dataFile )
return( read.table( pDataFile, sep=",", header=TRUE ) )
}
loanData <- getDataFrame( getwd(), "/loansData.csv" )
loanData
#
# The purpose of your analysis is to identify and quantify associations between the interest rate of
# the loan and the other variables in the data set. In particular, you should consider whether any of
# these variables have an important association with interest rate after taking into account the
# applicant's FICO score. For example, if two people have the same FICO score, can the other variables
# explain a difference in interest rate between them?
#
getDataFrame <- function( workingDirectory, dataFile )
{
pDataFile <- paste0( workingDirectory, dataFile )
return( read.table( pDataFile, sep=",", header=TRUE ) )
}
loanData <- getDataFrame( getwd(), "/loansData.csv" )
loanData$FICO.range
head(loadData)
head(loanData)
loanData$FICO.Range
help(rbind)
help(lapply)
lapply(strsplit(loanData$FICO.Range, ","), as.numeric))
lapply(strsplit(loanData$FICO.Range, ","), as.numeric)
lapply(strsplit(loanData$FICO.Range, "-"), as.numeric)
help(strsplit)
lapply( strsplit( loanData$FICO.Range, "-" ), as.numeric )
lapply( strsplit( loanData$FICO.Range, "-"), as.numeric )
lapply( strsplit( loanData$FICO.Range, "-" ), as.numeric )
strsplit( loanData$FICO.Range, "-" )
strsplit( loanData$FICO.Range, "-", USE.NAMES=FALSE )
strsplit( as.character( loanData$FICO.Range ), "-" )
lapply( strsplit( as.character( loanData$FICO.Range ), "-" ), as.numeric )
ficoScore <- lapply( strsplit( as.character( loanData$FICO.Range ), "-" ), as.numeric )
ficoScore
ficoScore[0][0]
ficoScore[0]
ficoScore[[0]]
ficoScore[[0][1]]
ficoScore[[1]]
ficoScore[[1]][0]
ficoScore[[1]][1]
ficoScore[[1]][2]
ficoScore <- lapply( strsplit( as.character( loanData$FICO.Range ), "-" ), as.numeric )
ficoScore[[1]][2]
ficoScore <- lapply( strsplit( as.character( loanData$FICO.Range ), "-" ), as.numeric )
ficoScore[[1]][1]
ficoScore[[1]][2]
ficoScore
help(sort)
ficoScore <- sort( lapply( strsplit( as.character( loanData$FICO.Range ), "-" ), as.numeric ) )
ficoScore[[1]][1]
ficoScore[[1]][2]
ficoScore <- sort( lapply( strsplit( as.character( loanData$FICO.Range ), "-" ), as.numeric ), method = "qu", index.return=TRUE )
sort(ficoScore[[1]])
sort(ficoScore[[1]][])
sort(ficoScore[[]][])
sort(ficoScore[][])
order(ficoScore)
help(unique)
y <- unique( ficoScore )
y
ficoScore <- unique( lapply( strsplit( as.character( loanData$FICO.Range ), "-" ), as.numeric ) )
ficoScore
sort(ficoScore)
sort(ficoScore, na.last = na.last, decreasing = decreasing)
help sort
help(sort)
sort(ficoScore, na.last = na.last, decreasing = TRUE )
sort(ficoScore, na.last = TRUE, decreasing = TRUE )
sort(ficoScore[[]], na.last = TRUE, decreasing = TRUE )
sort(ficoScore$x, na.last = TRUE, decreasing = TRUE )
sort(ficoScore[], na.last = TRUE, decreasing = TRUE )
sort(ficoScore[1], na.last = TRUE, decreasing = TRUE )
sort(ficoScore[[]][1], na.last = TRUE, decreasing = TRUE )
sort(ficoScore[[1]][1], na.last = TRUE, decreasing = TRUE )
sort(ficoScore[[1]][1], na.last = TRUE, decreasing = TRUE )
sort(ficoScore[[1]][], na.last = TRUE, decreasing = TRUE )
help(lapply)
strsplit( as.character( loanData$FICO.Range ), "-" ), as.numeric )
strsplit( as.character( loanData$FICO.Range ), "-" ), as.numeric )
strsplit( as.character( loanData$FICO.Range ), "-" )
unique( strsplit( as.character( loanData$FICO.Range ), "-" ) )
unique( strsplit( as.character( loanData$FICO.Range ), "-" ) )
y <- unique( strsplit( as.character( loanData$FICO.Range ), "-" ) )
x = data.frame( id=1:2)
x
x = data.frame( id=1:2, y[1:2])
x
x = data.frame( id=1:2, y)
x
x = data.frame( y)
x
y
x
y <- unique( strsplit( as.character( loanData$FICO.Range ), "-" ) )
y
as.matrix(y)
library(stringr)
str_split_fixed(loanData$FICO.Range, "-", 2)
unique(str_split_fixed(loanData$FICO.Range, "-", 2))
library( stringr )
ficoScore <- unique( str_split_fixed( loanData$FICO.Range, "-", 2 ) )
ficoScore
library( stringr )
ficoScore <- unique( lapply( str_split_fixed( loanData$FICO.Range, "-", 2 ), as.numeric ) )
ficoScore
help(str_split_fixed)
library( stringr )
ficoScore <- unique( str_split_fixed( loanData$FICO.Range, "-", 2 ) )
ficoScore
ficoScore[1][1]
names(ficoScore)
names(ficoScore) <- c( "low range score", "high range score" )
names(ficoScore)
ficoScore
ficoScore <- unique( str_split_fixed( loanData$FICO.Range, "-", 2 ) )
ficoScore
after <- cbind( loanData$FICO.Range, as.data.frame(ficoScore))
tmp <- matrix(unlist(strsplit(as.character(before$type), '_and_')), ncol=2,
byrow=TRUE)
after <- cbind(before$attr, as.data.frame(tmp))
tmp <- matrix(unlist(strsplit(as.character(loanData$FICO.Range), '-')), ncol=2,
byrow=TRUE)
after <- cbind(loanData$FICO.Range, as.data.frame(tmp))
after
names(after) <- c("original", "lower bound score", "upper bound score")
names(after)
after
tmp <- matrix( unlist( strsplit( as.character( loanData$FICO.Range ), '-' ) ), ncol=2, byrow=TRUE)
tmp <- unique( tmp )
after <- cbind( loanData$FICO.Range, as.data.frame( tmp ) )
tmp <- matrix( unlist( strsplit( as.character( loanData$FICO.Range ), '-' ) ), ncol=2, byrow=TRUE)
#tmp <- unique( tmp )
after <- cbind( loanData$FICO.Range, as.data.frame( tmp ) )
after <- unique( after )
after
tmp <- matrix( unlist( strsplit( as.character( loanData$FICO.Range ), '-' ) ), ncol=2, byrow=TRUE)
#tmp <- unique( tmp )
after <- cbind( loanData$FICO.Range, as.data.frame( tmp ) )
names(after) <- c("original", "lower bound score", "upper bound score")
after <- unique( after )
after
sort(after)
help(sort)
names(after) <- c("original", "lower_bound_score", "upper_bound_score")
after[order(-z,after$lower_bound_score)]
after[order(-after$lower_bound_score,after$lower_bound_score)]
after[order(-after$lower_bound_score)]
after[order(-after$lower_bound_score),]
after[order(after$lower_bound_score),]
tmp <- matrix( unlist( strsplit( as.character( loanData$FICO.Range ), '-' ) ), ncol=2, byrow=TRUE)
after <- cbind( loanData$FICO.Range, as.data.frame( tmp ) )
names(after) <- c("original", "lower_bound_score", "upper_bound_score")
#after <- unique( after )
after[order(after$lower_bound_score),]
table(after[after$lower_bound_score])
table(after[after$lower_bound_score])
after[after$lower_bound_score]
after
after[order(after$lower_bound_score),]
after <- after[order(after$lower_bound_score),]
after[order(after$lower_bound_score),]
after
table(after[after$lower_bound_score])
head(cbind(data, sequence(rle(after)$lower_bound_score)))
head(cbind(after, sequence(rle(after)$lower_bound_score)))
library(plyr)
library(reshape)
tapply(after$original,list(after$lower_bound_score),length)
tapply(after$original,list(after$lower_bound_score),length)
apply( after, 1, tapply(after$original,list(after$lower_bound_score),length) )
apply( after, 1, function(row) tapply(after$original,list(after$lower_bound_score),length) )
apply( after, 1, function(row) tapply(after$original,list(after$lower_bound_score),length)[row] )
count <- tapply(after$original,list(after$lower_bound_score),length)
count
count[1]
count[2]
count[2][1]
count <- lapply(after$original,list(after$lower_bound_score),length)
count <- tapply(after$original,list(after$lower_bound_score),length)
count <- tapply(after$original,list(after$lower_bound_score,after$upper_bound_score),length)
count
count <- tapply(after$original,list(after$lower_bound_score,"after$upper_bound_score"result""),length)
count <- tapply(after$original,list(after$lower_bound_score,"result"),length)
count <- tapply(after$original,list(after$lower_bound_score),length)
count
getDataFrame <- function( workingDirectory, dataFile )
{
pDataFile <- paste0( workingDirectory, dataFile )
return( read.table( pDataFile, sep=",", header=TRUE ) )
}
loanData <- getDataFrame( getwd(), "/loansData.csv" )
#ficoScore <- unique( lapply( strsplit( as.character( loanData$FICO.Range ), "-" ), as.numeric ) )
library( stringr )
ficoScore <- unique( str_split_fixed( loanData$FICO.Range, "-", 2 ) )
tmp <- matrix( unlist( strsplit( as.character( loanData$FICO.Range ), '-' ) ), ncol=2, byrow=TRUE)
after <- cbind( loanData$FICO.Range, as.data.frame( tmp ) )
names(after) <- c("original", "lower_bound_score", "upper_bound_score")
after <- unique( after )
after <- after[order(after$lower_bound_score),]
tapply( after$original, list( after$lower_bound_score ), length )
Interest.rate
loadData$Interest.rate
loadData$Interest.Rate
loanData$Interest.Rate
loanData$Interest.Rate[1:5]
loanData$Interest.Rate[1]
loanData$Interest.Rate[2]
loanData$Interest.Rate
loanData$Interest.Rate[Interest.Rate.Length]
loanData$Interest.Rate[nrows(Interest.Rate)]
loanData$Interest.Rate[nrow(Interest.Rate)]
loanData$Interest.Rate[nrow(loanData$Interest.Rate)]
tapply( after$original, list( after$lower_bound_score ), length )
after
tmp <- matrix( unlist( strsplit( as.character( loanData$FICO.Range ), '-' ) ), ncol=2, byrow=TRUE)
after <- cbind( loanData$FICO.Range, as.data.frame( tmp ) )
names(after) <- c("original", "lower_bound_score", "upper_bound_score")
after <- unique( after )
after <- after[order(after$lower_bound_score),]
tapply( after$original, list( after$lower_bound_score ), length )
tmp <- matrix( unlist( strsplit( as.character( loanData$FICO.Range ), '-' ) ), ncol=2, byrow=TRUE)
after <- cbind( loanData$FICO.Range, as.data.frame( tmp ) )
names(after) <- c("original", "lower_bound_score", "upper_bound_score")
#after <- unique( after )
after <- after[order(after$lower_bound_score),]
tapply( after$original, list( after$lower_bound_score ), length )
tmp <- matrix( unlist( strsplit( as.character( loanData$FICO.Range ), '-' ) ), ncol=2, byrow=TRUE)
after <- cbind( loanData$FICO.Range, as.data.frame( tmp ) )
names(after) <- c("original", "lower_bound_score", "upper_bound_score")
#after <- unique( after )
after <- after[order(after$lower_bound_score),]
tapply( after$original, list( after$lower_bound_score ), length )
after <- unique( after )
after
after$count <- count
after
tmpFicoScores <- matrix( unlist( strsplit( as.character( loanData$FICO.Range ), '-' ) ), ncol=2, byrow=TRUE)
tmpFicoScores
after <- cbind( loanData$FICO.Range, as.data.frame( tmpFicoScores ) )
after
names(ficoScoreFrame) <- c("original", "lower_bound_score", "upper_bound_score")
# Split out FICO scores into separate columns
tmpFicoScores <- matrix( unlist( strsplit( as.character( loanData$FICO.Range ), '-' ) ), ncol=2, byrow=TRUE)
# Store FICO scores, original value plus separated columns into dataframe
ficoScoreFrame <- cbind( loanData$FICO.Range, as.data.frame( tmpFicoScores ) )
# Add in a new top row for column names
names(ficoScoreFrame) <- c("original", "lower_bound_score", "upper_bound_score")
ficoScoreFrame
ficoScoreFrame <- ficoScoreFrame[order(ficoScoreFrame$lower_bound_score),]
ficoScoreFrame
# Split out FICO scores into separate columns
tmpFicoScores <- matrix( unlist( strsplit( as.character( loanData$FICO.Range ), '-' ) ), ncol=2, byrow=TRUE)
# Store FICO scores, original value plus separated columns into dataframe
ficoScoreFrame <- cbind( loanData$FICO.Range, as.data.frame( tmpFicoScores ) )
# Add in a new top row for column names
names(ficoScoreFrame) <- c("original", "lower_bound_score", "upper_bound_score")
# Order the FICO scores from lower to upper bound
ficoScoreFrame <- ficoScoreFrame[order(ficoScoreFrame$lower_bound_score),]
# Count the number of unique FICO scores in lower to upper bound ranges
ficoUniqueCounts <- tapply( ficoScoreFrame$original, list( ficoScoreFrame$lower_bound_score ), length )
# Save off only the unique FICO scores
ficoScoreFrame <- unique( ficoScoreFrame )
# Add in the column of unique FICO scores to main data frame
ficoScoreFrame$count <- ficoUniqueCounts
ficoScoreFrame
# Split out FICO scores into separate columns
tmpFicoScores <- matrix( unlist( strsplit( as.character( loanData$FICO.Range ), '-' ) ), ncol=2, byrow=TRUE)
# Store FICO scores, original value plus separated columns into dataframe
ficoScoreFrame <- cbind( loanData$FICO.Range, as.data.frame( tmpFicoScores ) )
# Add in a new top row for column names
names(ficoScoreFrame) <- c( "id", "original", "lower_bound_score", "upper_bound_score")
# Order the FICO scores from lower to upper bound
ficoScoreFrame <- ficoScoreFrame[order(ficoScoreFrame$lower_bound_score),]
# Count the number of unique FICO scores in lower to upper bound ranges
ficoUniqueCounts <- tapply( ficoScoreFrame$original, list( ficoScoreFrame$lower_bound_score ), length )
# Save off only the unique FICO scores
ficoScoreFrame <- unique( ficoScoreFrame )
# Add in the column of unique FICO scores to main data frame
ficoScoreFrame$count <- ficoUniqueCounts
ficoScoreFrame
# Split out FICO scores into separate columns
tmpFicoScores <- matrix( unlist( strsplit( as.character( loanData$FICO.Range ), '-' ) ), ncol=2, byrow=TRUE)
# Store FICO scores, original value plus separated columns into dataframe
ficoScoreFrame <- cbind( loanData$FICO.Range, as.data.frame( tmpFicoScores ) )
# Add in a new top row for column names
names(ficoScoreFrame) <- c( "original", "lower_bound_score", "upper_bound_score")
# Order the FICO scores from lower to upper bound
ficoScoreFrame <- ficoScoreFrame[order(ficoScoreFrame$lower_bound_score),]
# Count the number of unique FICO scores in lower to upper bound ranges
ficoUniqueCounts <- tapply( ficoScoreFrame$original, list( ficoScoreFrame$lower_bound_score ), length )
# Save off only the unique FICO scores
ficoScoreFrame <- unique( ficoScoreFrame )
# Add in the column of unique FICO scores to main data frame
ficoScoreFrame$count <- ficoUniqueCounts
ficoScoreFrame
ficoScoreFrame[[1]][1]
ficoScoreFrame[1]
ficoScoreFrame[1:2]
ficoScoreFrame[1:5]
ficoScoreFrame[1:4]
ficoScoreFrame[1:4][1]
ficoScoreFrame[[1:4]][1]
ficoScoreFrame[[1]][1]
ficoScoreFrame[[1]][2]
ficoScoreFrame[[2]][2]
ficoScoreFrame[[0]][2]
ficoScoreFrame[[1]][2]
ficoScoreFrame[[1]][1]
ficoScoreFrame[[3]][1]
ficoScoreFrame
help(hist)
hist(ficoScoreFrame)
hist(ficoScoreFrame$count)
hist(ficoScoreFrame$original,ficoScoreFrame$count)
hist(ficoScoreFrame$count,ficoScoreFrame$original)
hist(ficoScoreFrame$count,ylab=ficoScoreFrame$original)
hist(ficoScoreFrame$count,xlab=ficoScoreFrame$original)
op <- par(mfrow=c(2, 2))
hist(islands)
utils::str(hist(islands, col="gray", labels = TRUE))
hist(sqrt(islands), breaks = 12, col="lightblue", border="pink")
##-- For non-equidistant breaks, counts should NOT be graphed unscaled:
r <- hist(sqrt(islands), breaks = c(4*0:5, 10*3:5, 70, 100, 140),
col='blue1')
text(r$mids, r$density, r$counts, adj=c(.5, -.5), col='blue3')
sapply(r[2:3], sum)
sum(r$density * diff(r$breaks)) # == 1
lines(r, lty = 3, border = "purple") # -> lines.histogram(*)
par(op)
hist(ficoScoreFrame$lower_bound,ficoScoreFrame$count)
ficoScoreFrame
hist(ficoScoreFrame$lower_bound_score,ficoScoreFrame$count)
hist(as.numeric(ficoScoreFrame$lower_bound_score),ficoScoreFrame$count)
hist(as.numeric(ficoScoreFrame$lower_bound_score))
as.numeric(ficoScoreFrame$lower_bound_score)
ficoScoreFrame$lower_bound_score
ficoScoreFrame <- data.frame( ficoScoreFrame, lower_bound_score = as.numeric( ficoScoreFrame$original ),
upper_bound_score = as.numeric( ficoScoreFrame$original ) )
ficoScoreFrame
ficoScoreFrame <- data.frame( ficoScoreFrame, lower_bound_score = as.numeric( as.character( ficoScoreFrame$original ) ),
upper_bound_score = as.numeric( as.character( ficoScoreFrame$original ) ) )
class(ficoScoreFrame$lower_bound_score)
as.numberic(ficoScoreFrame$lower_bound_score)
as.numeric(ficoScoreFrame$lower_bound_score)
as.numeric(as.character(ficoScoreFrame$lower_bound_score))
ficoScoreFrame$lower_bound_score <- as.numeric( as.character( ficoScoreFrame$lower_bound_score ) )
ficoScoreFrame$upper_bound_score <- as.numeric( as.character( ficoScoreFrame$upper_bound_score ) )
ficoScoreFrame
# Split out FICO scores into separate columns
tmpFicoScores <- matrix( unlist( strsplit( as.character( loanData$FICO.Range ), '-' ) ), ncol=2, byrow=TRUE)
# Store FICO scores, original value plus separated columns into dataframe
ficoScoreFrame <- cbind( loanData$FICO.Range, as.data.frame( tmpFicoScores ) )
# Add in a new top row for column names
names(ficoScoreFrame) <- c( "original", "lower_bound_score", "upper_bound_score")
# Order the FICO scores from lower to upper bound
ficoScoreFrame <- ficoScoreFrame[order(ficoScoreFrame$lower_bound_score),]
# Count the number of unique FICO scores that match the lower to upper bound ranges in the data
ficoUniqueCounts <- tapply( ficoScoreFrame$original, list( ficoScoreFrame$lower_bound_score ), length )
# Save off only the unique FICO scores
ficoScoreFrame <- unique( ficoScoreFrame )
# Dynamically add in the column (called "count") of unique FICO scores into main data frame
ficoScoreFrame$count <- ficoUniqueCounts
ficoScoreFrame$lower_bound_score <- as.numeric( as.character( ficoScoreFrame$lower_bound_score ) )
ficoScoreFrame$upper_bound_score <- as.numeric( as.character( ficoScoreFrame$upper_bound_score ) )
ficoScoreFrame
class(ficoScoreFrame$lower_bound_score )
hist(ficoScoreFrame$lower_bound_score)
hist(ficoScoreFrame$count,ficoScoreFrame$lower_bound_score)
hist(ficoScoreFrame$lower_bound_score, ficoScoreFrame$count)
help(matrix)
help(plot)
plot(ficoScoreFrame$original, ficoScoreFrame$count )
plot(ficoScoreFrame$original, ficoScoreFrame$count, pch=19, col="blue", xlab="FICO Score", ylab="Count In Range" )
plot(ficoScoreFrame$original, ficoScoreFrame$count, pch=19, col="blue", xlab="FICO Score", ylab="Count In Range", cex=0.5 )
library(Hmisc)
plot(ficoScoreFrame$original, ficoScoreFrame$count, pch=19, col="blue", xlab="FICO Score", ylab="Count In Range", cex=0.5 )
# [Scatterplots]
workingDir <- "C:/cygwin/home/anonymous/CourseWork/DataAnalysis"
pDataFile <- paste0( workingDir, "/ss06pid.csv")
pData <- read.table( pDataFile, sep=",", header=TRUE )
plot( pData$JWMNP, pData$WAGP, pch=19, col="blue", xlab="Commuting Time", ylab="Wages" )
# [Scatterplots] change the size of the dots, size of points, cex is part of par (do help(par) to see cex)
plot( pData$JWMNP, pData$WAGP, pch=19, col="blue", xlab="Commuting Time", ylab="Wages", cex=0.5 )
# [Scatterplots] change color of dot based on sex (0 or 1)
plot( pData$JWMNP, pData$WAGP, pch=19, col=pData$SEX, xlab="Commuting Time", ylab="Wages", cex=0.5 )
percentMaxAge <- pData$AGEP / max( pData$AGEP )
plot( pData$JWMNP, pData$WAGP, pch=19, col=pData$SEX, xlab="Commuting Time", ylab="Wages", cex=percentMaxAge*0.5 )
# [Scatterplots] Overlaying lines/points
plot( pData$JWMNP, pData$WAGP, pch=19, xlab="Commuting Time", ylab="Wages", cex=0.5, col="blue" )
lines( rep( 100, dim(pData)[1] ), pData$WAGP, col="grey", lwd=5 )
points( seq( 0, 200, length=100 ), seq( 0, 20e5, length=100 ), col="red", pch=19 )
# [Scatterplots] numeric variables as factors
library(Hmisc)
ageGroups <- cut2( pData$AGEP, g=5 )
plot( pData$JWMNP, pData$WAGP, pch=19, col=ageGroups, xlab="Commuting Time", ylab="Wages", cex=0.5 )
plot( ficoScoreFrame$original, ficoScoreFrame$count, pch=19, col="blue", xlab="FICO Score", ylab="Count In Range" )
plot( ficoScoreFrame$original, ficoScoreFrame$count, pch=19, col="blue", xlab="FICO Score", ylab="Sum of FICO Scores In Range" )
smoothScatter( ( ficoScoreFrame$original, ficoScoreFrame$count)
smoothScatter( ficoScoreFrame$original, ficoScoreFrame$count)
hbo <- hexbin( ficoScoreFrame$original, ficoScoreFrame$count)
libary(hexbin)
library(hexbin)
hbo <- hexbin( ficoScoreFrame$original, ficoScoreFrame$count)
plot(hbo)
qqplot((hbo)
qqplot(hbo)
qqplot(hbo)
qqplot( ficoScoreFrame$original, ficoScoreFrame$count)
matplot( ( ficoScoreFrame, type=b)
matplot( ficoScoreFrame, type="b")
plot( ficoScoreFrame$original, ficoScoreFrame$count, pch=2, col="blue", xlab="FICO Score", ylab="Sum of FICO Scores In Range" )
plot( ficoScoreFrame$lower_bound_score, ficoScoreFrame$count, pch=19, col="blue", xlab="FICO Score", ylab="Sum of FICO Scores In Range" )
help(plot)
require(stats)
plot(cars)
lines(lowess(cars))
plot(sin, -pi, 2*pi) # see ?plot.function
## Discrete Distribution Plot:
plot(table(rpois(100,5)), type = "h", col = "red", lwd=10,
main="rpois(100,lambda=5)")
## Simple quantiles/ECDF, see ecdf() {library(stats)} for a better one:
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x, cex = .5, col = "dark red")
# Simple plot
plot( ficoScoreFrame$lower_bound_score, ficoScoreFrame$count, pch=19, col="blue", xlab="FICO Score", ylab="Sum of FICO Scores In Range" )
plot( ficoScoreFrame$lower_bound_score, ficoScoreFrame$count, pch=19, col="blue", xlab="FICO Score", ylab="Sum of FICO Scores In Range", lwd=10 )
plot( ficoScoreFrame$lower_bound_score, ficoScoreFrame$count, pch=19, col="blue", xlab="FICO Score", ylab="Sum of FICO Scores In Range", lwd=5 )
plot( ficoScoreFrame$lower_bound_score, ficoScoreFrame$count, pch=19, col="blue", xlab="FICO Score", ylab="Sum of FICO Scores In Range", lwd=5, main = "FICO Scores" )
ficoScoreFrame$lower_bound_score
ficoScoreFrame$lower_bound_score[1]
ficoScoreFrame$lower_bound_score[nrow(ficoScoreFrame$lower_bound_score)]
ficoScoreFrame$lower_bound_score[nrow(ficoScoreFrame$lower_bound_score)[1]]
nrow(ficoScoreFrame$lower_bound_score)
ficoScoreFrame$lower_bound_score[nrow(ficoScoreFrame)]
plot( ficoScoreFrame$lower_bound_score, ficoScoreFrame$count, pch=19, col="blue", xlab="FICO Score",
ylab="Sum of FICO Scores In Range", lwd=5, main = "FICO Scores",
xlim = ( ficoScoreFrame$lower_bound_score,  ficoScoreFrame$lower_bound_score[nrow(ficoScoreFrame)] ) )
# Simple plot
plot( ficoScoreFrame$lower_bound_score, ficoScoreFrame$count, pch=19, col="blue", xlab="FICO Score",
ylab="Sum of FICO Scores In Range", lwd=5, main = "FICO Scores",
xlim = range( ficoScoreFrame$lower_bound_score,  ficoScoreFrame$lower_bound_score[nrow(ficoScoreFrame)] ) )
plot( ficoScoreFrame$lower_bound_score, ficoScoreFrame$count, pch=19, col="blue", xlab="FICO Score",
ylab="Sum of FICO Scores In Range", lwd=5, main = "FICO Scores" )
# Simple plot
plot( ficoScoreFrame$lower_bound_score, ficoScoreFrame$count, pch=19, col="blue", xlab="FICO Score",
ylab="Sum of FICO Scores In Range", lwd=5, main = "FICO Scores",
xlim = range( ficoScoreFrame$lower_bound_score,  ficoScoreFrame$lower_bound_score[nrow(ficoScoreFrame)] ),
log = "y")
# Simple plot
plot( ficoScoreFrame$lower_bound_score, ficoScoreFrame$count, pch=19, col="blue", xlab="FICO Score",
ylab="Sum of FICO Scores In Range", lwd=5, main = "FICO Scores",
xlim = range( ficoScoreFrame$lower_bound_score,  ficoScoreFrame$lower_bound_score[nrow(ficoScoreFrame)] ) )
